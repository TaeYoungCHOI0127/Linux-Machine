#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <errno.h>
#include <stdbool.h>
#include <sys/select.h>
#include <time.h>

class RS485Communicator {
private:
    int uart_fd;
    uint8_t device_addr;
    bool debug_print;
    const char *baud_rates[7] = {"1200", "2400", "4800", "9600", "19200", "57600", "115200"};

    void wait_for_milliseconds(long wait_ms) {
        struct timespec ts;
        ts.tv_sec  = wait_ms / 1000;
        ts.tv_nsec = (wait_ms % 1000) * 1000000L;
        nanosleep(&ts, NULL);
    }

    uint16_t calculate_crc16(const uint8_t *data, uint16_t length) {
        uint16_t crc = 0xFFFF;
        for (uint16_t i = 0; i < length; i++) {
            crc ^= (uint16_t)data[i];
            for (uint8_t j = 0; j < 8; j++) {
                if (crc & 0x0001) {
                    crc = (crc >> 1) ^ 0xA001;
                } else {
                    crc >>= 1;
                }
            }
        }
        return crc;
    }

public:
    RS485Communicator() : uart_fd(-1), device_addr(1), debug_print(true) {}

    ~RS485Communicator() {
        if (uart_fd >= 0) {
            close(uart_fd);
        }
    }

    int init(const char *port) {
        uart_fd = open(port, O_RDWR | O_NOCTTY);
        if (uart_fd < 0) {
            printf("UART 열기 실패: %s\n", strerror(errno));
            return -1;
        }

        struct termios options;
        tcgetattr(uart_fd, &options);

        cfsetispeed(&options, B115200);
        cfsetospeed(&options, B115200);

        options.c_cflag = (options.c_cflag & ~CSIZE) | CS8;
        options.c_cflag &= ~PARENB;
        options.c_cflag &= ~CSTOPB;
        options.c_cflag |= CLOCAL | CREAD;

        options.c_iflag = 0;
        options.c_oflag = 0;
        options.c_lflag = 0;

        tcflush(uart_fd, TCIFLUSH);
        if (tcsetattr(uart_fd, TCSANOW, &options) != 0) {
            printf("UART 설정 실패\n");
            close(uart_fd);
            uart_fd = -1;
            return -1;
        }
        return 0;
    }

    int read_baud_rate() {
        if (uart_fd < 0 || device_addr > 0x7F) {
            if (debug_print) printf("잘못된 매개변수 또는 UART 미초기화\n");
            return -1;
        }

        uint8_t cmd[8] = {device_addr, 0x03, 0x00, 0xFE, 0x00, 0x01};
        uint16_t crc = calculate_crc16(cmd, 6);
        cmd[6] = crc & 0xFF;
        cmd[7] = (crc >> 8) & 0xFF;

        if (debug_print) {
            printf("송신 시작: ");
            for (int i = 0; i < 8; i++) printf("0x%02X ", cmd[i]);
            printf("\n");
        }

        tcflush(uart_fd, TCIFLUSH); // 명령 보내기 전 수신 버퍼 지우기

        if (write(uart_fd, cmd, 8) != 8) {
            if (debug_print) printf("명령 전송 실패: %s\n", strerror(errno));
            return -1;
        }

        tcdrain(uart_fd);

        if (debug_print) printf("송신 완료\n");

        fd_set readfds;
        struct timeval tv;
        FD_ZERO(&readfds);
        FD_SET(uart_fd, &readfds);
        tv.tv_sec = 1;
        tv.tv_usec = 0;

        int retval = select(uart_fd + 1, &readfds, NULL, NULL, &tv);
        if (retval < 0) {
            if (debug_print) printf("select 실패: %s\n", strerror(errno));
            return -1;
        } else if (retval == 0) {
            if (debug_print) printf("타임아웃: 응답 없음\n");
            return -1;
        }

        uint8_t response[32];
        int bytes_read = read(uart_fd, response, sizeof(response));
        if (bytes_read < 0) {
            if (debug_print) printf("응답 읽기 실패: %s\n", strerror(errno));
            return -1;
        }

        if (debug_print) {
            printf("수신 완료 (%d bytes): ", bytes_read);
            for (int i = 0; i < bytes_read; i++) printf("0x%02X ", response[i]);
            printf("\n");
        }

        if (bytes_read >= 5 && response[0] == device_addr && response[1] == 0x03) {
            uint8_t byte_count = response[2];
            if (bytes_read >= 3 + byte_count + 2) {
                uint16_t value = (response[3] << 8) | response[4];
                uint16_t received_crc = (response[3 + byte_count + 1] << 8) | response[3 + byte_count];
                uint16_t calculated_crc = calculate_crc16(response, 3 + byte_count);

                if (received_crc != calculated_crc) {
                    if (debug_print) printf("CRC 검증 실패 (계산: 0x%04X, 수신: 0x%04X)\n",
                                          calculated_crc, received_crc);
                    return -1;
                }

                switch (value) {
                    case 0x0000: case 0x0001: case 0x0002: case 0x0003:
                    case 0x0004: case 0x0005: case 0x0007:
                        printf("보드레이트 값: %s\n", baud_rates[value]);
                        return value;
                    default:
                        printf("알 수 없는 보드레이트 값: 0x%04X\n", value);
                        return -1;
                }
            }
        }

        if (debug_print) printf("유효하지 않은 응답 형식\n");
        return -1;
    }

    void run() {
        int read_count = 0;
        while (1) {
            read_count++;
            printf("\n%d번째 보드레이트 읽기 시도...\n", read_count);
            printf("1초 대기 후 보드레이트 읽기 시작...\n");

            wait_for_milliseconds(3000);

            if (read_baud_rate() < 0) {
                printf("%d번째 읽기 실패\n", read_count);
            } else {
                printf("%d번째 읽기 완료\n", read_count);
            }

            printf("3초 대기 후 다음 읽기 시도...\n");
            wait_for_milliseconds(3000);
        }
    }
};

int main() {
    printf("프로그램 시작 (Ctrl+C로 종료)\n");

    RS485Communicator comm;
    if (comm.init("/dev/ttyUSB0") < 0) {
        printf("UART 초기화 실패\n");
        return -1;
    }

    comm.run();

    printf("프로그램 종료\n");
    return 0;
}
